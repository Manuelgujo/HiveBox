name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 pylint

    - name: Run Black formatter check
      run: black --check .
        
    - name: Lint with flake8
      run: flake8 . --count --max-line-length=100 --statistics

    - name: Analyze with Pylint
      run: pylint $(git ls-files '*.py')

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile

    - name: Build Docker image
      run: docker build -t hivebox:latest .

    - name: Start Docker container
      run: |
        docker run -d -p 5000:5000 hivebox:latest
        echo "Waiting for container to start..."
        sleep 10

    - name: Test endpoints
      run: |
        curl localhost:5000/version
        curl localhost:5000/temperature

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Start Flask Application
      run: |
        python app.py &
        echo "Waiting for Flask to start..."
        timeout=30
        while ! curl -s http://localhost:5000/version > /dev/null; do
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for Flask to start"
            exit 1
          fi
          timeout=$((timeout-1))
          sleep 1
        done
        echo "Flask is ready!"

    - name: Run tests with coverage
      run: |
        pytest --cov=./ --cov-report=xml

  sonarqube:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Ensure Shell Availability
      run: |
        sudo apt-get update
        sudo apt-get install -y dash bash
        if [ ! -L /bin/sh ]; then sudo ln -sf /bin/dash /bin/sh; fi

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install SonarScanner
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner.zip
        export SONAR_SCANNER_HOME=$(pwd)/sonar-scanner-4.6.2.2472-linux
        echo "SONAR_SCANNER_HOME=$SONAR_SCANNER_HOME" >> $GITHUB_ENV
        echo "PATH=$SONAR_SCANNER_HOME/bin:$PATH" >> $GITHUB_ENV
        echo "SonarScanner home is set to: $SONAR_SCANNER_HOME"
        ls -l $SONAR_SCANNER_HOME/bin

   # - name: Debug PATH
   #   run: |
   #       echo "Current PATH: $PATH"
   #       which sonar-scanner
   #       ls -l $SONAR_SCANNER_HOME/bin      
   
   # - name: Verify SonarScanner Installation
   #   run: |
   #       sonar-scanner --version  # Verify SonarScanner is correctly installed
   
   # - name: Run SonarQube Scan
   #   shell: /bin/bash
   #   env:
   #     JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
   #     # SONAR_SCANNER_HOME: /home/runner/work/HiveBox-Scalable-RESTful-API-for-Beekeepers/HiveBox-Scalable-RESTful-API-for-Beekeepers/sonar-scanner-4.6.2.2472-linux
   #     PATH: $SONAR_SCANNER_HOME/bin:/usr/lib/jvm/temurin-17-jdk-amd64/bin:$PATH
   #   run: |
   #     sonar-scanner \
   #     -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
   #     -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
   #     -Dsonar.host.url=https://sonarcloud.io \
   #     -Dsonar.login=${{ secrets.SONAR_TOKEN }}   

  terrascan:
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Terrascan
      run: |
        curl -sSLo terrascan.tar.gz https://github.com/tenable/terrascan/releases/download/v1.12.0/terrascan_1.12.0_Linux_x86_64.tar.gz
        tar -xzvf terrascan.tar.gz
        sudo mv terrascan /usr/local/bin/
        terrascan version

    #- name: Run Terrascan
    #  run: |
    #    terrascan scan -i k8s -d k8s/

  push_image:
    runs-on: ubuntu-latest
    needs: terrascan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and tag Docker image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner,,}}/hivebox:latest .
        docker build -t ghcr.io/${{ github.repository_owner,,}}/hivebox:${{ github.sha }} .
    
    - name: Push Docker images
      run: |
        docker push ghcr.io/${{ github.repository_owner,,}}/hivebox:latest
        docker push ghcr.io/${{ github.repository_owner,,}}/hivebox:${{ github.sha }}